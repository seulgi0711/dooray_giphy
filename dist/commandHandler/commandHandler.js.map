{"version":3,"sources":["../../src/commandHandler/commandHandler.js"],"names":["actionsAttachmentForOne","getOriginalUrl","createSendActionWithValue","of","actionsAttachmentForMulti","actions","search","getSearchKeyword","requester","Giphy","mergeActionAndImageAttachment","createOriginImageAttachment","searchMulti","extractMultiCount","mergeActionAndImagesAttachments","createMultiImageAttachments","createSearchAttachments","extractOffset","merge","createOriginImagesAttachment","searchOneImage","createKeywordText","Future","parallel","Infinity","mergeAll","searchMultiImages","commandHandler","isMultiImage","T"],"mappings":";;;;;;AAAA;;;;AACA;;AAiBA;;;;AACA;;AACA;;AACA;;AACA;;;;AAWA,IAAMA,0BAA0B,gBAC5B,6CAD4B,EAE5B,iBACIC,2BADJ,EAEIC,uCAFJ,EAGIC,SAHJ,EAII,mBAAO,oCAAiB,CAAjB,CAAP,CAJJ,EAKI,kBAAM,SAAN,CALJ,CAF4B,CAAhC;;AAWA,IAAMC,4BAA4B;AAC9BC,aAAS,CAAC,oCAAiB,CAAjB,CAAD;AADqB,CAAlC;;AAIA;AACA,IAAMC,SAAS,gBACX,0CADW,EAEX,iBACIC,6BADJ,EAEIC,oBAAUC,KAAV,CAAgBH,MAFpB,EAGI,gBAAI,qBAASI,2CAAT,EAAwC,CAACV,uBAAD,EAA0BW,yCAA1B,CAAxC,CAAJ,CAHJ,CAFW,CAAf;;AASA;AACA,IAAMC,cAAc,gBAChB,+CADgB,EAEhB,iBACI,qBAASJ,oBAAUC,KAAV,CAAgBG,WAAzB,EAAsC,CAACL,6BAAD,EAAmBM,8BAAnB,CAAtC,CADJ,EAEI,gBAAI,qBAASC,6CAAT,EAA0C,CAAC,mBAAOV,yBAAP,CAAD,EAAoCW,yCAApC,CAA1C,CAAJ,CAFJ,EAGI,gBAAI,oBAAO,oBAAP,CAAJ,CAHJ,CAFgB,CAApB;;AASA,IAAMC,0BAA0B,gBAC5B,4DAD4B,EAE5B,iBACI,qBAASR,oBAAUC,KAAV,CAAgBH,MAAzB,EAAiC,CAACC,6BAAD,EAAmBM,8BAAnB,EAAsCI,0BAAtC,CAAjC,CADJ,EAEI,gBAAI,qBAASC,YAAT,EAAgB,CAACC,0CAAD,EAA+B,mBAAO,EAAP,CAA/B,CAAhB,CAAJ,CAFJ,EAGI,gBAAIhB,SAAJ,CAHJ,EAII,gBAAI,kBAAM,aAAN,CAAJ,CAJJ,EAKI,gBAAI,oBAAO,8BAAP,CAAJ;AACA;AANJ,CAF4B,CAAhC;;AAWA,IAAMiB,iBAAiB,gBACnB,kDADmB,EAEnB,iBACI,iBAAK,CAAC,iBAAKC,+BAAL,EAAwBC,kBAAOnB,EAA/B,CAAD,EAAqCa,uBAArC,CAAL,CADJ,EAEIM,kBAAOC,QAAP,CAAgBC,QAAhB,CAFJ,EAGI,gBAAIC,eAAJ,CAHJ,CAFmB,CAAvB;;AASA,IAAMC,oBAAoB,gBACtB,qDADsB,EAEtB,mBACI,iBAAKb,8BAAL,EAAwB,mBAAO,CAAP,CAAxB,CADJ,EAEIO,cAFJ,EAGI,qBAAS,oBAAOF,YAAP,CAAT,EAAwB,CAAC,iBAAKG,+BAAL,EAAwBC,kBAAOnB,EAA/B,CAAD,EAAqCS,WAArC,CAAxB,CAHJ,CAFsB,CAA1B;;AASA;AACA,IAAMe,iBAAiB,gBACnB,kDADmB,EAEnB,iBACI,iBAAK,MAAL,CADJ,EAEI,iBAAK,CACD,CAACC,yBAAD,EAAeF,iBAAf,CADC,EAED,CAACG,QAAD,EAAIT,cAAJ,CAFC,CAAL,CAFJ,CAFmB,CAAvB;;kBAWeO,c","file":"commandHandler.js","sourcesContent":["import Future from 'fluture';\nimport {\n    always,\n    append,\n    cond,\n    converge,\n    equals,\n    ifElse,\n    juxt,\n    map,\n    merge,\n    mergeAll,\n    objOf,\n    of,\n    pipe,\n    prop,\n    T\n} from \"ramda\";\nimport requester from \"../requester/requester\";\nimport { def } from \"../types/types\";\nimport { liftA2, logTap } from \"../utils/fnUtil\";\nimport { extractMultiCount, extractOffset, getOriginalUrl, getSearchKeyword, isMultiImage } from \"../utils/requestUtil\";\nimport {\n    createKeywordText,\n    createMultiImageAttachments,\n    createNextAction,\n    createOriginImageAttachment,\n    createOriginImagesAttachment,\n    createSendActionWithValue,\n    mergeActionAndImageAttachment,\n    mergeActionAndImagesAttachments\n} from \"../utils/responseUtil\";\n\nconst actionsAttachmentForOne = def(\n    'actionsAttachmentForOne :: Object -> Object',\n    pipe(\n        getOriginalUrl,\n        createSendActionWithValue,\n        of,\n        append(createNextAction(1)),\n        objOf('actions')\n    )\n);\n\nconst actionsAttachmentForMulti = {\n    actions: [createNextAction(1)]\n};\n\n// prettier-ignore\nconst search = def(\n    'search :: Object -> Future Object Object',\n    pipe(\n        getSearchKeyword,\n        requester.Giphy.search,\n        map(converge(mergeActionAndImageAttachment, [actionsAttachmentForOne, createOriginImageAttachment]))\n    )\n);\n\n// prettier-ignore\nconst searchMulti = def(\n    \"searchMulti :: Object -> Future Object Object\",\n    pipe(\n        converge(requester.Giphy.searchMulti, [getSearchKeyword, extractMultiCount]),\n        map(converge(mergeActionAndImagesAttachments, [always(actionsAttachmentForMulti), createMultiImageAttachments])),\n        map(logTap('searchMulti output'))\n    )\n);\n\nconst createSearchAttachments = def(\n    'createSearchAttachments :: ReqBody -> Future Object Object',\n    pipe(\n        converge(requester.Giphy.search, [getSearchKeyword, extractMultiCount, extractOffset]),\n        map(converge(merge, [createOriginImagesAttachment, always({})])),\n        map(of),\n        map(objOf('attachments')),\n        map(logTap('createOriginImagesAttachment'))\n        // map(converge(merge, [createOriginImageAttachment, createActionsAttachment]))\n    ));\n\nconst searchOneImage = def(\n    \"searchOneImage :: Object -> Future Object Object\",\n    pipe(\n        juxt([pipe(createKeywordText, Future.of), createSearchAttachments]),\n        Future.parallel(Infinity),\n        map(mergeAll)\n    )\n);\n\nconst searchMultiImages = def(\n    \"searchMultiImages :: Object -> Future Object Object\",\n    ifElse(\n        pipe(extractMultiCount, equals(1)),\n        searchOneImage,\n        converge(liftA2(merge), [pipe(createKeywordText, Future.of), searchMulti])\n    )\n);\n\n// prettier-ignore\nconst commandHandler = def(\n    \"commandHandler :: Object -> Future Object Object\",\n    pipe(\n        prop(\"body\"),\n        cond([\n            [isMultiImage, searchMultiImages],\n            [T, searchOneImage]\n        ])\n    )\n);\n\nexport default commandHandler;\n"]}