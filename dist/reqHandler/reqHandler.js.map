{"version":3,"sources":["../../src/reqHandler/reqHandler.js"],"names":["createSendResult","attachments","createInChannelResponse","createReplaceResponse","Future","of","search","requester","Giphy","searchWithOffset","getSearchKeyword","extractOffset","createOriginImageAttachment","mergeSearchAttachments","searchResult","actionsAttachments","map","createSearchAttachments","createActions","createSearchResult","createKeywordText","parallel","Infinity","mergeAll","reqHandler","isSendButton","isSearchButton","T","text"],"mappings":";;;;;;;AAAA;;;;AACA;;AACA;;AACA;;;;AACA;;AACA;;AACA;;AACA;;;;AASO,IAAMA,8CAAmB,gBAC5B,oDAD4B,EAE5B,iBACI,iBAAK,iBAAL,CADJ,EAEI,iBAAK,CAAC,MAAD,EAAS,aAAT,CAAL,CAFJ,EAGI,mBAAO,EAAEC,aAAa,iBAAK,CAAL,CAAf,EAAP,CAHJ,EAIIC,qCAJJ,EAKIC,mCALJ,EAMIC,kBAAOC,EANX,CAF4B,CAAzB;;AAYA,IAAMC,0BAAS,gBAClB,0CADkB,EAElB,iBACI,qBAASC,oBAAUC,KAAV,CAAgBC,gBAAzB,EAA2C,CAACC,6BAAD,EAAmBC,0BAAnB,CAA3C,CADJ,EAEI,gBAAIC,yCAAJ,CAFJ,CAFkB,CAAf;;AAQA,IAAMC,0DAAyB,gBAClC,kFADkC,EAElC,UAACC,YAAD,EAAeC,kBAAf,EAAsC;AAClC,WAAOD,aAAaE,GAAb,CAAiB,iDAA8BD,kBAA9B,CAAjB,CAAP;AACH,CAJiC,CAA/B;;AAOA,IAAME,4DAA0B,gBACnC,2DADmC,EAEnC,qBAASJ,sBAAT,EAAiC,CAACP,MAAD,EAASY,2BAAT,CAAjC,CAFmC,CAAhC;;AAKP;AACO,IAAMC,kDAAqB,gBAC9B,sDAD8B,EAE9B,iBACI,iBAAK,CAACC,+BAAD,EAAoBH,uBAApB,CAAL,CADJ,EAEIb,kBAAOiB,QAAP,CAAgBC,QAAhB,CAFJ,EAGI,gBAAIC,eAAJ,CAHJ,CAF8B,CAA3B;;AASP;AACA,IAAMC,aAAa,gBACf,8CADe,EAEf,iBACI,iBAAK,MAAL,CADJ,EAEI,iBAAK,CACD,CAACC,wBAAD,EAAezB,gBAAf,CADC,EAED,CAAC0B,0BAAD,EAAiBP,kBAAjB,CAFC,EAGD,CAACQ,QAAD,EAAIvB,kBAAOC,EAAP,CAAU,EAAEuB,MAAM,MAAR,EAAV,CAAJ,CAHC,CAAL,CAFJ,CAFe,CAAnB;;kBAYeJ,U","file":"reqHandler.js","sourcesContent":["import Future from \"fluture\";\nimport { parseInt } from \"lodash\";\nimport { cond, converge, evolve, juxt, map, mergeAll, pick, pipe, prop, propOr, T, take } from \"ramda\";\nimport requester from \"../requester/requester\";\nimport { def } from \"../types/types\";\nimport { isSearchButton, isSendButton } from \"../utils/actionUtil\";\nimport { extractOffset, getSearchKeyword } from \"../utils/requestUtil\";\nimport {\n    createActions,\n    createOriginImageAttachment,\n    createInChannelResponse,\n    createKeywordText,\n    createReplaceResponse,\n    mergeActionAndImageAttachment\n} from \"../utils/responseUtil\";\n\nexport const createSendResult = def(\n    \"createSendResult :: Object -> Future Object Object\",\n    pipe(\n        prop(\"originalMessage\"),\n        pick([\"text\", \"attachments\"]),\n        evolve({ attachments: take(1) }),\n        createInChannelResponse,\n        createReplaceResponse,\n        Future.of\n    )\n);\n\nexport const search = def(\n    \"search :: Object -> Future Object Object\",\n    pipe(\n        converge(requester.Giphy.searchWithOffset, [getSearchKeyword, extractOffset]),\n        map(createOriginImageAttachment)\n    )\n);\n\nexport const mergeSearchAttachments = def(\n    \"mergeSearchAttachments :: Future Object Object -> Object -> Future Object Object\",\n    (searchResult, actionsAttachments) => {\n        return searchResult.map(mergeActionAndImageAttachment(actionsAttachments));\n    }\n);\n\nexport const createSearchAttachments = def(\n    \"createSearchAttachments :: Object -> Future Object Object\",\n    converge(mergeSearchAttachments, [search, createActions])\n);\n\n// prettier-ignore\nexport const createSearchResult = def(\n    \"createSearchResult :: Object -> Future Object Object\",\n    pipe(\n        juxt([createKeywordText, createSearchAttachments]),\n        Future.parallel(Infinity),\n        map(mergeAll)\n    )\n);\n\n// prettier-ignore\nconst reqHandler = def(\n    \"reqHandler :: Object -> Future Object Object\",\n    pipe(\n        prop(\"body\"),\n        cond([\n            [isSendButton, createSendResult],\n            [isSearchButton, createSearchResult],\n            [T, Future.of({ text: 'nono' })]\n        ]),\n    )\n);\n\nexport default reqHandler;\n"]}