{"version":3,"sources":["../src/types.js"],"names":["checkTypeId","expectedType","obj","eq","fn","$type","$Future","$","BinaryType","parse","Future","name","isFuture","extractLeft","extractRight","ActionType","EnumType","Button","NullaryType","def","HMD","create","checkTypes","env","concat","Unknown"],"mappings":";;;;;;;AAAA;;AAGA;;;;AACA;;;;AACA;;;;AACA;;;;;;AASA,IAAMA,cAAc,kBAAM,UAACC,YAAD,EAAeC,GAAf,EAAuB;AAC7C,QAAMC,KAAK,SAALA,EAAK;AAAA,eAAM,oBAAQ,mBAAOF,YAAP,CAAR,EAA8BG,EAA9B,CAAN;AAAA,KAAX;AACA,WAAO,oBAAQ,CACXD,GAAG,iBAAK,CAAC,aAAD,EAAgB,WAAhB,EAA6B,QAA7B,CAAL,CAAH,CADW,EAEXA,GAAGE,kCAAH,CAFW,CAAR,EAGJH,GAHI,CAAP;AAIH,CANmB,CAApB;;AAQA,IAAMI,UAAUC,uBAAEC,UAAF,CACZH,mCAAMI,KAAN,CAAYC,kBAAO,QAAP,CAAZ,EAA8BC,IADlB,EAEZ,8CAFY,EAGZD,kBAAOE,QAHK,EAIZF,kBAAOG,WAJK,EAKZH,kBAAOI,YALK,CAAhB;;AAQA,IAAMC,aAAaR,uBAAES,QAAF,CACf,IADe,EAEf,EAFe,EAGd,CAAC,QAAD,CAHc,CAAnB;;AAMA,IAAMC,SAASV,uBAAEW,WAAF,CAAc,QAAd,EAAwB,EAAxB,EAA4B,mBAAO,MAAP,EAAe,QAAf,CAA5B,CAAf;;AAEO,IAAMC,oBAAMC,gBAAIC,MAAJ,CAAW;AAC1BC,gBAAY,IADc;AAE1BC,SAAKhB,uBAAEgB,GAAF,CAAMC,MAAN,CAAa,CACdlB,QAAQC,uBAAEkB,OAAV,EAAmBlB,uBAAEkB,OAArB,CADc,EAEdR,MAFc,CAAb;AAFqB,CAAX,CAAZ","file":"types.js","sourcesContent":["import {\n    path\n} from 'ramda';\nimport $ from 'sanctuary-def';\nimport $type from 'sanctuary-type-identifiers';\nimport HMD from 'hm-def';\nimport Future from 'fluture';\nimport {\n    curry,\n    compose,\n    propEq,\n    equals,\n    anyPass\n} from 'ramda';\n\nconst checkTypeId = curry((expectedType, obj) => {\n    const eq = fn => compose(equals(expectedType), fn);\n    return anyPass([\n        eq(path(['constructor', 'prototype', '@@type'])),\n        eq($type),\n    ])(obj);\n});\n\nconst $Future = $.BinaryType(\n    $type.parse(Future['@@type']).name,\n    'https://github.com/fluture-js/Fluture#readme',\n    Future.isFuture,\n    Future.extractLeft,\n    Future.extractRight\n);\n\nconst ActionType = $.EnumType(\n    'dg',\n    '',\n    (['button'])\n)\n\nconst Button = $.NullaryType('Button', '', propEq('type', 'button'));\n\nexport const def = HMD.create({\n    checkTypes: true,\n    env: $.env.concat([\n        $Future($.Unknown, $.Unknown),\n        Button\n    ])\n});\n"]}