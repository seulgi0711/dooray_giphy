{"version":3,"sources":["../../src/utils/requestUtil.js"],"names":["maybe","v","f","m","isNothing","value","getImageUrl","imageType","giphy","images","url","getOriginalUrl","getFixedHeightSmallUrl","isMultiImage","getSearchKeyword","trim","head","extractMultiCount","isEmpty","Maybe","Nothing","Just","parseInt","extractOffset"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AAEO,IAAMA,wBAAQ,kBAAM,UAACC,CAAD,EAAIC,CAAJ,EAAOC,CAAP,EAAa;AACpC,QAAIA,EAAEC,SAAN,EAAiB;AACb,eAAOH,CAAP;AACH;;AAED,WAAOC,EAAEC,EAAEE,KAAJ,CAAP;AACH,CANoB,CAAd;;AAQP;AACO,IAAMC,oCAAc,gBACvB,2CADuB,EAEvB,UAACC,SAAD,EAAYC,KAAZ;AAAA,WAAsBA,MAAMC,MAAN,CAAaF,SAAb,EAAwBG,GAA9C;AAAA,CAFuB,CAApB;;AAKP;AACO,IAAMC,0CAAiB,gBAC1B,oCAD0B,EAE1BL,YAAY,UAAZ,CAF0B,CAAvB;;AAKP;AACO,IAAMM,0DAAyB,gBAClC,oCADkC,EAElCN,YAAY,oBAAZ,CAFkC,CAA/B;;AAKP;AACO,IAAMO,sCAAe,gBACxB,oCADwB,EAExB,iBAAK,iBAAK,MAAL,CAAL,EAAmB,iBAAK,UAAL,CAAnB,CAFwB,CAArB;;AAKP;AACO,IAAMC,8CAAmB,gBAC5B,uCAD4B,EAE5B,iBAAK,iBAAK,MAAL,CAAL,EAAmBC,WAAnB,EAAyB,kBAAM,GAAN,CAAzB,EAAqCC,WAArC,CAF4B,CAAzB;;AAKP;AACO,IAAMC,gDAAoB,gBAC7B,wCAD6B,EAE7B,iBACI,iBAAK,MAAL,CADJ,EAEI,kBAAM,eAAN,CAFJ,EAGI,mBAAOC,eAAP,EAAgBC,oBAAMC,OAAtB,EAA+BD,oBAAME,IAArC,CAHJ,EAII,gBAAI,gBAAI,CAAJ,CAAJ,CAJJ,EAKI,gBAAI,gBAAI,CAAJ,CAAJ,CALJ,EAMI,gBAAI,gBAAI,CAAJ,CAAJ,CANJ,EAOIrB,MAAM,CAAN,EAASsB,gBAAT,CAPJ,CAF6B,CAA1B;;AAaP;AACO,IAAMC,wCAAgB,gBACzB,oCADyB,EAEzB,iBAAK,mBAAO,GAAP,EAAY,aAAZ,CAAL,EAAiCD,gBAAjC,CAFyB,CAAtB","file":"requestUtil.js","sourcesContent":["import { isEmpty, parseInt } from \"lodash\";\nimport { curry, head, ifElse, map, match, max, min, nth, pipe, prop, propOr, split, test, trim } from \"ramda\";\nimport { Maybe } from 'ramda-fantasy';\nimport { def } from \"../types/types\";\nimport { logTap } from './fnUtil';\n\nexport const maybe = curry((v, f, m) => {\n    if (m.isNothing) {\n        return v;\n    }\n\n    return f(m.value);\n})\n\n// prettier-ignore\nexport const getImageUrl = def(\n    'getImageUrl :: String -> Object -> String',\n    (imageType, giphy) => giphy.images[imageType].url\n);\n\n// prettier-ignore\nexport const getOriginalUrl = def(\n    \"getOriginalUrl :: Object -> String\",\n    getImageUrl('original')\n);\n\n// prettier-ignore\nexport const getFixedHeightSmallUrl = def(\n    \"getOriginalUrl :: Object -> String\",\n    getImageUrl('fixed_height_small')\n);\n\n// prettier-ignore\nexport const isMultiImage = def(\n    'isMultiImage :: ReqBody -> Boolean',\n    pipe(prop('text'), test(/--multi=/))\n);\n\n// prettier-ignore\nexport const getSearchKeyword = def(\n    'getSearchKeyword :: ReqBody -> String',\n    pipe(prop(\"text\"), trim, split(' '), head)\n);\n\n// prettier-ignore\nexport const extractMultiCount = def(\n    'extractMultiCount :: ReqBody -> Number',\n    pipe(\n        prop('text'),\n        match(/--multi=(\\d*)/),\n        ifElse(isEmpty, Maybe.Nothing, Maybe.Just),\n        map(nth(1)),\n        map(min(5)),\n        map(max(1)),\n        maybe(1, parseInt)\n    )\n);\n\n// prettier-ignore\nexport const extractOffset = def(\n    \"extractOffset :: ReqBody -> Number\",\n    pipe(propOr(\"0\", \"actionValue\"), parseInt)\n);"]}