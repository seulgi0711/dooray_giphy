{"version":3,"sources":["../../src/types/types.js"],"names":["checkTypeId","expectedType","obj","eq","fn","$type","$Future","$","BinaryType","parse","Future","name","isFuture","extractLeft","extractRight","ActionType","EnumType","ButtonType","BUTTON_TYPE","Button","NullaryType","InChannelResponse","RESPONSE_TYPE","IN_CHANNEL","ReplaceResponse","ReqBody","def","HMD","create","checkTypes","env","concat","Unknown"],"mappings":";;;;;;;AAAA;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;AAEA,IAAMA,cAAc,kBAAM,UAACC,YAAD,EAAeC,GAAf,EAAuB;AAC7C,QAAMC,KAAK,SAALA,EAAK;AAAA,eACP,oBACI,mBAAOF,YAAP,CADJ,EAEIG,EAFJ,CADO;AAAA,KAAX;AAKA,WAAO,oBAAQ,CAACD,GAAG,iBAAK,CAAC,aAAD,EAAgB,WAAhB,EAA6B,QAA7B,CAAL,CAAH,CAAD,EAAmDA,GAAGE,kCAAH,CAAnD,CAAR,EACHH,GADG,CAAP;AAGH,CATmB,CAApB;;AAWA,IAAMI,UAAUC,uBAAEC,UAAF,CACZH,mCAAMI,KAAN,CAAYC,kBAAO,QAAP,CAAZ,EAA8BC,IADlB,EAEZ,8CAFY,EAGZD,kBAAOE,QAHK,EAIZF,kBAAOG,WAJK,EAKZH,kBAAOI,YALK,CAAhB;;AAQA,IAAMC,aAAaR,uBAAES,QAAF,CAAW,aAAX,EAA0B,EAA1B,EAA8B,CAAC,QAAD,CAA9B,CAAnB;;AAEA,IAAMC,aAAaV,uBAAES,QAAF,CACf,wBADe,EAEf,EAFe,EAGf,mBAAOE,qBAAP,CAHe,CAAnB;;AAMA,IAAMC,SAASZ,uBAAEa,WAAF,CAAc,QAAd,EAAwB,EAAxB,EAA4B,mBAAO,MAAP,EAAe,QAAf,CAA5B,CAAf;;AAEA,IAAMC,oBAAoBd,uBAAEa,WAAF,CACtB,+BADsB,EAEtB,EAFsB,EAGtB,mBAAO,cAAP,EAAuBE,wBAAcC,UAArC,CAHsB,CAA1B;;AAMA,IAAMC,kBAAkBjB,uBAAEa,WAAF,CACpB,6BADoB,EAEpB,EAFoB,EAGpB,mBAAO,gBAAP,EAAyB,IAAzB,CAHoB,CAAxB;;AAMA,IAAMK,UAAUlB,uBAAEa,WAAF,CACZ,qBADY,EAEZ,EAFY,EAGZ,oBAAQ,CAAC,gBAAI,aAAJ,CAAD,EAAqB,gBAAI,SAAJ,CAArB,EAAqC,gBAAI,MAAJ,CAArC,CAAR,CAHY,CAAhB;;AAMO,IAAMM,oBAAMC,gBAAIC,MAAJ,CAAW;AAC1BC,gBAAY,IADc;AAE1BC,SAAKvB,uBAAEuB,GAAF,CAAMC,MAAN,CAAa,CACdzB,QAAQC,uBAAEyB,OAAV,EAAmBzB,uBAAEyB,OAArB,CADc,EAEdb,MAFc,EAGdF,UAHc,EAIdI,iBAJc,EAKdG,eALc,EAMdC,OANc,CAAb;AAFqB,CAAX,CAAZ","file":"types.js","sourcesContent":["import Future from \"fluture\";\nimport HMD from \"hm-def\";\nimport { allPass, anyPass, compose, curry, equals, has, path, propEq, values } from \"ramda\";\nimport $ from \"sanctuary-def\";\nimport $type from \"sanctuary-type-identifiers\";\nimport { BUTTON_TYPE, RESPONSE_TYPE } from \"../constant\";\n\nconst checkTypeId = curry((expectedType, obj) => {\n    const eq = fn =>\n        compose(\n            equals(expectedType),\n            fn\n        );\n    return anyPass([eq(path([\"constructor\", \"prototype\", \"@@type\"])), eq($type)])(\n        obj\n    );\n});\n\nconst $Future = $.BinaryType(\n    $type.parse(Future[\"@@type\"]).name,\n    \"https://github.com/fluture-js/Fluture#readme\",\n    Future.isFuture,\n    Future.extractLeft,\n    Future.extractRight\n);\n\nconst ActionType = $.EnumType(\"DoorayGiphy\", \"\", [\"button\"]);\n\nconst ButtonType = $.EnumType(\n    \"DoorayGiphy/ButtonType\",\n    \"\",\n    values(BUTTON_TYPE)\n);\n\nconst Button = $.NullaryType(\"Button\", \"\", propEq(\"type\", \"button\"));\n\nconst InChannelResponse = $.NullaryType(\n    \"DoorayGiphy/InChannelResponse\",\n    \"\",\n    propEq(\"responseType\", RESPONSE_TYPE.IN_CHANNEL)\n);\n\nconst ReplaceResponse = $.NullaryType(\n    \"DoorayGiphy/ReplaceResponse\",\n    \"\",\n    propEq(\"deleteOriginal\", true)\n);\n\nconst ReqBody = $.NullaryType(\n    \"DoorayGiphy/ReqBody\",\n    \"\",\n    allPass([has('responseUrl'), has('command'), has('text')])\n);\n\nexport const def = HMD.create({\n    checkTypes: true,\n    env: $.env.concat([\n        $Future($.Unknown, $.Unknown),\n        Button,\n        ButtonType,\n        InChannelResponse,\n        ReplaceResponse,\n        ReqBody\n    ])\n});\n"]}